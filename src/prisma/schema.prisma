generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id           Int         @id @default(autoincrement())
  title        String
  content      String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt
  published    Boolean     @default(false)
  featured     Boolean     @default(false)
  categoryId   Int
  authorId     Int
  collectionId Int?
  author       Author      @relation(fields: [authorId], references: [id])
  category     Category    @relation(fields: [categoryId], references: [id])
  collection   Collection? @relation(fields: [collectionId], references: [id])
  comments     Comment[]
  images       Image[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  articles Article[]
}

model User {
  id        Int   @id @default(autoincrement())
  displayName String
  email     String   @unique
  photoURL    String?
  provider    String
  createdAt   DateTime @default(now())
  comments  Comment[]
  likes       Like[]  
}

model Author {
  id       Int       @id @default(autoincrement())
  name     String
  bio      String?
  articles Article[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  articleId Int
  article   Article  @relation(fields: [articleId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  parentId  Int?     // Nullable field to store parent comment ID
  parent    Comment? @relation("CommentToComment", fields: [parentId], references: [id])
  children  Comment[] @relation("CommentToComment")
  likeCount Int      @default(0)
  likes     Like[]
}

model Like {
  id        Int      @id @default(autoincrement())
  commentId Int
  comment   Comment  @relation(fields: [commentId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([commentId, userId]) // Ensure a user can like a comment only once
}

model Image {
  id        Int     @id @default(autoincrement())
  url       String
  alt       String?
  articleId Int
  article   Article @relation(fields: [articleId], references: [id])
}

model Collection {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  articles    Article[]
}
